> LVG    (/home/travis/.ansible/plugins/modules/lvg.py)

        This module facilitates a. Creation of a volume group b.
        Modification of attributes of an existing volume group c.
        Extension of a volume group d. Varyon/Varyoff of a volume
        group e. Reduction/Removal of a volume group

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- critical_pvs
        Specifies the Critical PVs option for the volume group. If
        write request failures occur in the mirrored logical volume,
        the PV is marked as missing and it stops sending I/O requests
        to the failed mirrored logical volume.
        [Default: (null)]
        type: bool

- critical_vg
        Enables the Critical VG option of the volume group
        [Default: (null)]
        type: bool

- delete_lvs
        When `state=absent', deallocates the existing logical volume
        partitions and then deletes resultant empty logical volumes
        [Default: (null)]
        type: bool

- enhanced_con_vg
        Specifies Enhanced Concurrent Capable volume group.
        [Default: (null)]
        type: bool

- force
        When `state=present', forces the volume group to be created on
        the specified physical volume unless the physical volume is
        part of another volume group in the Device Configuration
        Database or a volume group that is active. When
        `state=absent', removes the requirement for user confirmation
        when delete_lvs has been specified
        [Default: (null)]
        type: bool

- major_num
        Specifies the major number of the volume group that is created
        [Default: (null)]
        type: int

- mpool
        Assigns each of the physical volumes that are being added to
        the specified mirror pool
        [Default: (null)]
        type: str

- mpool_strict
        Enables mirror pool strictness for the volume group.
        (Choices: none, normal, strict)[Default: (null)]
        type: str

- multi_node_vary
        Creates a volume group that is allowed to varyon in non-
        concurrent mode in more than one node at the same time
        [Default: (null)]
        type: bool

- num_lvs
        Number of logical volumes that can be created. This attribute
        is valid for only scalable volume groups
        [Default: (null)]
        type: int

- num_partitions
        Total number of partitions in the volume group This attribute
        is valid for scalable volume groups.
        [Default: (null)]
        type: int

- pp_limit
        Changes the limit of the number of physical partitions per
        physical volume. It must be 1 - 16 for 32 PV volume groups and
        1 and 64 for 128 PV volume groups
        [Default: (null)]
        type: int

- pp_size
        Sets the number of megabytes in each physical partition, which
        is expressed in units of megabytes from 1 (1 MB) through
        131072 (128 GB)
        [Default: (null)]
        type: int

- pvs
        Comma separated list of physical volumes
        [Default: (null)]
        elements: str
        type: list

- retry
        Enables the infinite retry option of the logical volume.
        [Default: (null)]
        type: bool

- state
        Specifies the action to be performed on a VG. `present' -
        Create/Extends/Modifies VG, `absent' - Reduce/Remove VG,
        `varyon' - Varyon VG, `varyoff' - Varyoff VG
        (Choices: absent, present, varyoff, varyon)[Default: present]
        type: str

- sysstart_avail
        Specifies that the volume group is automatically available
        during a system restart
        [Default: (null)]
        type: bool

= vg_name
        Specifies the volume group name

        type: str

- vg_type
        Specifies the type of the volume group.
        (Choices: big, scalable, none)[Default: (null)]
        type: str


REQUIREMENTS:  AIX

AUTHOR: AIX Development Team (@pbfinley1911)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Extend a volume group
  lvg:
    pvs=hdisk1
    vg_name=datavg
    state=present

- name: Varyon a volume group
  lvg:
    vg_name=datavg
    state=varyon


RETURN VALUES:
 # 
