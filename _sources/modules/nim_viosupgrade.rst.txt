.. _nim_viosupgrade_module:


nim_viosupgrade -- Perform an upgrade with the viosupgrade tool
===============================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Tool to upgrade VIOSes in NIM environment.



Requirements
------------
The below requirements are needed on the host that executes this module.

- AIX >= 7.1 TL3
- Python >= 2.7



Parameters
----------

  action (True, str, None)
    Specifies the operation to perform.

    ``bosinst`` to perform and bosinst installation.

    ``altdisk`` to perform and alternate disk installation.

    ``get_status`` to get the status of the upgrade.


  targets (optional, list, None)
    NIM targets.


  target_file (optional, str, None)
    Specifies the file name that contains the list of VIOS nodes.

    The values and fields in the file must be specified in a particular sequence and format. The details of the format are specified in the /usr/samples/nim/viosupgrade.inst file and they are comma-separated. The maximum number of nodes that can be installed through the -f option is 30.

    The VIOS images are installed on the nodes simultaneously.

    For an SSP cluster, the viosupgrade command must be run on individual nodes. Out of the n number of nodes in the SSP cluster, maximum n-1 nodes can be upgraded at the same time. Hence, you must ensure that at least one node is always active in the cluster and is not part of the upgrade process.


  mksysb_name (optional, dict, None)
    mksysb name.


  spot_name (optional, dict, None)
    SPOT name.


  backup_file (optional, dict, None)
    Specifies the resource name of the VIOS configuration backup file.


  rootvg_clone_disk (optional, dict, None)
    Clone disk name.


  rootvg_install_disk (optional, dict, None)
    Install disk name.


  res_resolv_conf (optional, dict, None)
    NIM resolv_conf resource name.


  res_script (optional, dict, None)
    NIM script resource name.


  res_fb_script (optional, dict, None)
    NIM fb_script resource name.


  res_file_res (optional, dict, None)
    NIM file_res resource name.


  res_image_data (optional, dict, None)
    NIM image_data resource name.


  res_log (optional, dict, None)
    NIM log resource name.


  manage_cluster (optional, bool, False)
    Specifies that cluster-level backup and restore operations are performed.

    The -c flag is mandatory for the VIOS that is part of an SSP cluster.


  preview (optional, bool, False)
    Validates whether VIOS hosts are ready for the installation.

    It must be specified only for validation and can be used for preview of the installation image only.


  skip_rootvg_cloning (optional, bool, False)
    Skips the cloning of current rootvg disks to alternative disks and continues with the VIOS installation on the current rootvg disk.

    If the storage disks are not available, you can specify the -s flag to continue with the installation.


  vios_status (optional, dict, None)
    Specifies the result of a previous operation.

    If set then the *vios_status* of a target tuple must contain *SUCCESS* to attempt update.

    If no *vios_status* value is found for a tuple, then returned *status* for this tuple is set to *SKIPPED-NO-PREV-STATUS*.


  nim_node (optional, dict, None)
    Allows to pass along NIM node info from a task to another so that it discovers NIM info only one time for all tasks.





Notes
-----

.. note::
   - See IBM documentation about requirements for the viosupgrade command.




Examples
--------

.. code-block:: yaml+jinja

    
    - name: Perform an upgrade of nimvios01
      nim_viosupgrade:
        targets: nimvios01
        action: altdisk



Return Values
-------------

msg (always, str, )
  Status information.


targets (always, list, )
  List of VIOSes.


nim_node (always, dict, )
  NIM node info.


status (always, dict, )
  Status for each VIOS (dicionnary key).

  When ``target_file`` is set, then the key is 'all'.





Status
------




- This module is not guaranteed to have a backwards compatible interface. *[preview]*


- This module is maintained by community.



Authors
~~~~~~~

- AIX Development Team (@pbfinley1911)

